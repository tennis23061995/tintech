{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\home\\controller\\register.js"
    ],
    "names": [
        "http",
        "require",
        "fs",
        "indexAction",
        "session",
        "uinfo",
        "think",
        "isEmpty",
        "redirect",
        "name",
        "assign",
        "displayView",
        "checkcaptchaAction",
        "post",
        "key",
        "request",
        "undefined",
        "json",
        "secretKey",
        "verificationUrl",
        "console",
        "log",
        "result",
        "doRequest",
        "res",
        "doregisterAction",
        "newData",
        "password",
        "email",
        "checkIsExist",
        "s",
        "userFlag",
        "emailFlag",
        "tags",
        "errmsg",
        "JSON",
        "parse",
        "success",
        "md5",
        "nickname",
        "createtime",
        "datetime",
        "model",
        "addUser",
        "rs",
        "uInfo",
        "pic",
        "openid",
        "way",
        "adduserAction",
        "status",
        "errno",
        "fail",
        "where",
        "findUser",
        "length",
        "isexistAction",
        "checkemailAction",
        "geetestAction",
        "Geetest",
        "service",
        "geetest",
        "isPost",
        "validate",
        "register",
        "get",
        "url",
        "resolve",
        "reject",
        "error",
        "body",
        "statusCode"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\home\\controller\\register.js",
    "sourcesContent": [
        "'use strict';\r\nlet http = require(\"http\");\r\nlet fs = require(\"fs\");\r\nimport Base from './base.js';\r\nexport default class extends Base {\r\n\r\n    // 注册页面\r\n    async indexAction(){\r\n\r\n      let uinfo=await this.session('uInfo');\r\n      if(!think.isEmpty(uinfo)){\r\n        //已注册并登陆\r\n        return this.redirect('/personal/@'+uinfo.name);\r\n      }else {\r\n        this.assign(\"title\",\"会员注册\");\r\n        return this.displayView(\"register_index\");\r\n      }\r\n    }\r\n    async checkcaptchaAction()\r\n    {\r\n      let key=await this.post(\"captchasecret\");\r\n      var request = require('request');\r\n      if(key === undefined || key === '' || key === null) {\r\n    return this.json({\"responseCode\" : 1,\"responseDesc\" : \"Please select captcha\"});\r\n  }\r\n  // Put your secret key here.\r\n  var secretKey = \"6Lc7SRAUAAAAAFBgqATY0MiyKBbIXMPhJsVqgpzr1\";\r\n  // req.connection.remoteAddress will provide IP address of connected user.\r\n  var verificationUrl = \"https://www.google.com/recaptcha/api/siteverify?secret=\" + secretKey + \"&response=\" + key;\r\n  console.log(key);\r\n  var result=false;\r\n//   if (key) {\r\n//     request({\r\n//         url: 'https://www.google.com/recaptcha/api/siteverify',\r\n//         method: 'POST',\r\n//         form: {\r\n//             secret: secretKey,\r\n//             response: key\r\n//         }\r\n//     }, function (error, response, body) {\r\n//         // Parse String thành JSON object\r\n//         try {\r\n//             body = JSON.parse(body);\r\n//         } catch (err) {\r\n//             body = {};\r\n//         }\r\n//\r\n//         if (!error && response.statusCode == 200 && body.success) {\r\n//           console.log(\"tc\");\r\n//         } else {\r\n//           console.log(\"tb\");\r\n//           return this.json({ registeredSuccessfully: false, reason: \"Captcha failed, try again.\" });\r\n//             // Xử lý lỗi nếu Captcha không hợp lệ\r\n//         }\r\n//     });\r\n// } else {\r\n//       return this.json({\"responseCode\" : 1,\"responseDesc\" : \"Please select captcha\"});\r\n// }\r\n//   think.http(verificationUrl).then(function(content){\r\n// console.log(content);\r\n// });\r\n  // Hitting GET request to the URL, Google will respond with success or error scenario.\r\n  // think.get(verificationUrl,function(data){\r\n  //   console.log(data);\r\n  // })\r\n  // request(verificationUrl,function(error,response,body) {\r\n  //   console.log(response)\r\n  //   result=true;\r\n  //   body = JSON.parse(body);\r\n  //\r\n  //   // Success will be true or false depending upon captcha validation.\r\n  //   if(body.success !== undefined && !body.success) {\r\n  //     console.log(\"that bai\");\r\n  //     //console.log(body)\r\n  //     //response.end('{\"success\" : \"Updated Successfully\", \"status\" : 200}');\r\n  //     return this.json({\"responseCode\" : 1,\"responseDesc\" : \"Failed captcha verification\"});\r\n  //   }\r\n  //\r\n  //\r\n  // });\r\n  let res = await doRequest(verificationUrl);\r\nconsole.log(res);\r\nif(result)return  this.json({\"responseCode\" : 0,\"responseDesc\" : \"Sucess\"});\r\n    }\r\n    //注册接口\r\n    async doregisterAction(){\r\n      let key=await this.post(\"captchasecret\");\n      var secretKey = \"6Lc7SRAUAAAAAFBgqATY0MiyKBbIXMPhJsVqgpzr\";\n      var verificationUrl = \"https://www.google.com/recaptcha/api/siteverify?secret=\" + secretKey + \"&response=\" + key;\n      let newData=this.post();\n      let name=newData.name;\n      let password=newData.password;\n      let email=newData.email;\n      if(name!==''&&password!==''&&email!==''){\n        //校验用户是否存在\n        let s=await this.checkIsExist({name:name})\n        let userFlag=await this.checkIsExist({name:name});\n        let emailFlag=await this.checkIsExist({email:email});\n        if(userFlag===0){\n          return this.json({tags:\"username\",errmsg:'Tài khoản đã tồn tại！'});\n        }else if(emailFlag===0){\n          return this.json({tags:\"email\",errmsg:'Email đã tồn tại！'});\n        }\n      }\n      if(key)\n      {\n        let res = await doRequest(verificationUrl);\n        var result=JSON.parse(res);\n        console.log(result.success)\n      if(!result.success)\n      {\n          return this.json({ tags:\"g-recaptcha\",errmsg: \"Captcha thất bại, hãy thử lại.\" });\n      }\n      else{\n        newData.password=think.md5(newData.password);\n        newData.nickname=newData.name;\n    // 后台校验\n    newData.createtime=think.datetime(this.post('createtime'));\n                let rs=await this.model('home').addUser(newData);\n                let uInfo={\n                    email:email,\n                    pic:'',\n                    name:name,\n                    nickname:'',\n                    openid:'',\n                    way:'site'\n                  }\n                  console.log(\"them thanh cong\"+rs)\n                await this.session(\"uInfo\", uInfo);\n                if(rs==0) return this.success();\n\n      }\n    }\n    else {\n        return this.json({tags:\"g-recaptcha\",errmsg: \"Vui lòng chọn captcha\"});\n    }\n\n    }\r\n\r\n// Helper function to make API call to recatpcha and check response\r\n    // 获取网络头像并保存\r\n    // async getpicAction(){\r\n    //     let url=\"http://www.jsout.com/static/common/images/common/logo.jpg\";\r\n    //     http.get(url, function(res){\r\n    //           var imgData = \"\";\r\n    //           res.setEncoding(\"binary\"); //一定要设置response的编码为binary否则会下载下来的图片打不开\r\n    //           res.on(\"data\", function(chunk){\r\n    //               imgData+=chunk;\r\n    //           });\r\n    //           console.log(url);\r\n    //           res.on(\"end\", function(){\r\n    //               let mypath=think.RESOURCE_PATH+\"/static/common/images/pic/logonew.png\"\r\n    //               fs.writeFile(mypath, imgData, \"binary\", function(err){\r\n    //                   if(err){\r\n    //                       console.log(err);\r\n    //                   }else {\r\n    //                     return mypath;\r\n    //                   }\r\n    //                   // console.log(\"down success\");\r\n    //               });\r\n    //           });\r\n    //       });\r\n    // }\r\n    async adduserAction(){\r\n        let newData=this.post();\r\n        // 后台校验\r\n        let name=newData.name;\r\n        let email=newData.email;\r\n        let nickname=newData.nickname;\r\n        let openid=newData.openid;\r\n        newData.createtime=think.datetime(this.post('createtime'));\r\n        if(name!==''&&nickname!==''&&email!==''&&openid!==''){\r\n          //校验用户是否存在\r\n          let s=await this.checkIsExist({name:name})\r\n          if(s===0){\r\n            return this.json({status:0,errno:1,errmsg:'该用户名已存在！'});\r\n          }else{\r\n              let rs=await this.model('home').addUser(newData);\r\n              //设置session\r\n              let uinfo=await this.session('uInfo');\r\n              uinfo.name=name;\r\n              if(rs){return this.success();}\r\n          }\r\n        }else{\r\n          return this.fail('请填写必要信息！');\r\n        }\r\n    }\r\n\r\n    //检查是否存在\r\n    async checkIsExist(where){\r\n        let rs= await this.model('home').findUser(where);\r\n        let s=(rs.length>0)?0:1;\r\n        return s;\r\n    }\r\n\r\n    //校验注册用户名是否存在\r\n    async isexistAction(){\r\n      let name=await this.post('name');\r\n      let s=await this.checkIsExist({name:name});\r\n      if(s==1){\r\n        return this.json({status:1,errno:0,errmsg:'用户名可用！'});\r\n      }else{\r\n        return this.json({status:0,errno:1,errmsg:'该用户名已存在！'});\r\n      }\r\n    }\r\n\r\n    //校验邮箱是否存在\r\n    async checkemailAction(){\r\n      let email=await this.post('email');\r\n      let s=await this.checkIsExist({'email':email});\r\n      if(s==1){\r\n        return this.json({status:1,errno:0,errmsg:'该邮箱可用！'});\r\n      }else{\r\n        return this.json({status:0,errno:1,errmsg:'该邮箱已存在！'});\r\n      }\r\n    }\r\n\r\n    //极验验证码\r\n    async geetestAction(){\r\n      // pc 端接口\r\n        let Geetest = think.service(\"geetest\"); //加载 commoon 模块下的 geetset service\r\n        let geetest = new Geetest();\r\n        if(this.isPost()){\r\n            let post =this.post();\r\n            let res = await geetest.validate(post);\r\n            return this.json(res);\r\n        }else {\r\n            let res = await geetest.register(this.get('type'));\r\n            return this.json(res);\r\n        }\r\n   }\r\n}\r\n\nfunction doRequest(url) {\r\n  var request = require('request');\r\n  return new Promise(function (resolve, reject) {\r\n    request(url, function (error, res, body) {\r\n      if (!error && res.statusCode == 200) {\r\n        resolve(body);\r\n      } else {\r\n        reject(error);\r\n      }\r\n    });\r\n  });\r\n}\r\n"
    ]
}