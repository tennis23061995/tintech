{"version":3,"sources":["../../../src/adapter/db/postgresql.js"],"names":[],"mappings":"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","file":"postgresql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\n\nlet PostgreSocket = think.adapter('socket', 'postgresql');\n/**\n * postgre db\n */\nexport default class extends Base {\n  /**\n   * init\n   * @return {} []\n   */\n  init(config = {}){\n    this.config = config;\n    //operate\n    this.comparison = {\n      'EQ': '=',\n      'NEQ': '!=',\n      '<>': '!=',\n      'GT': '>',\n      'EGT': '>=',\n      'LT': '<',\n      'ELT': '<=',\n      'NOTLIKE': 'NOT LIKE',\n      'LIKE': 'LIKE',\n      'NOTILIKE': 'NOT ILIKE',\n      'ILIKE': 'ILIKE',\n      'IN': 'IN',\n      'NOTIN': 'NOT IN',\n      'BETWEEN': 'BETWEEN',\n      'NOTBETWEEN': 'NOT BETWEEN'\n    };\n    this.selectSql = '%EXPLAIN%SELECT%DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT%%UNION%%COMMENT%';\n  }\n  /**\n   * get postgre socket instance\n   * @param  {Object} config []\n   * @return {}        []\n   */\n  socket(sql){\n    if(this._socket){\n      return this._socket;\n    }\n    let config = think.extend({\n      sql: sql\n    }, this.config);\n    this._socket = PostgreSocket.getInstance(config, thinkCache.DB, ['sql']);\n    return this._socket;\n  }\n  /**\n   * get table info\n   * @param  {String} table [table name]\n   * @return {Promise}       []\n   */\n  async getSchema(table){\n    let columnSql = `SELECT column_name,is_nullable,data_type FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name='${table}'`;\n    let columnsPromise = this.query(columnSql);\n    let indexSql = `SELECT indexname,indexdef FROM pg_indexes WHERE tablename='${table}'`;\n    let indexPromise = this.query(indexSql);\n    let [columns, indexs] = await Promise.all([columnsPromise, indexPromise]);\n    let schema = {};\n    columns.forEach(item => {\n      schema[item.column_name] = {\n        name: item.column_name,\n        type: item.data_type,\n        required: item.is_nullable === 'NO',\n        default: '',\n        auto_increment: false\n      };\n    });\n    let extra = {};\n    let reg = /\\((\\w+)(?:, (\\w+))*\\)/;\n    indexs.forEach(item => {\n      let [, name, ...others] = item.indexdef.match(reg);\n      extra[name] = {};\n      if(item.indexdef.indexOf(' pkey ') > -1){\n        extra[name].primary = true;\n      }\n      let index = item.indexdef.indexOf(' UNIQUE ') > -1 ? 'unique' : 'index';\n      extra[name][index] = others.length ? others : true;\n    });\n\n    return think.extend(schema, extra);\n  }\n  /**\n   * start transaction\n   * @return {Promise} []\n   */\n  startTrans(){\n    if (this.transTimes === 0) {\n      this.transTimes++;\n      return this.execute('BEGIN');\n    }\n    this.transTimes++;\n    return Promise.resolve();\n  }\n  /**\n  * parse where item\n  * @param  {String} key []\n  * @param  {Mixed} val []\n  * @return {String}     []\n  */\n  parseWhereItem(key, val){\n    // {id: null}\n    if(val === null){\n      return `${key} IS NULL`;\n    }\n    // {id: {'<': 10, '>': 1}}\n    else if (think.isObject(val)) { \n      let logic = this.getLogic(val);\n      let result = [];\n      for(let opr in val){\n        let nop = opr.toUpperCase();\n        nop = this.comparison[nop] || nop;\n        let parsedValue = this.parseValue(val[opr]);\n        //{id: {IN: [1, 2, 3]}}\n        if(think.isArray(parsedValue)){\n          result.push(`${key} ${nop} (${parsedValue.join(', ')})`);\n        }\n        else if(parsedValue === 'null'){\n          result.push(key + ' ' + (nop === '!=' ? 'IS NOT NULL' : 'IS NULL'));\n        }\n        else{\n          result.push(key + ' ' + nop + ' ' + parsedValue);\n        }\n      }\n      return result.join(' ' + logic + ' ');\n    }\n    // where({id: [1, 2, 3]})\n    else if(think.isArray(val)){\n      let flag = think.isNumber(val[0]) || think.isNumberString(val[0]);\n      if(flag){\n        flag = val.every(item => {\n          return think.isNumber(item) || think.isNumberString(item);\n        });\n        if(flag){\n          return `${key} IN ( ${val.join(', ')} )`;\n        }\n      }\n    }\n    else {\n      return key + ' = ' + this.parseValue(val);\n    }\n\n    let whereStr = '';\n    let data;\n    if (think.isString(val[0])) {\n      let val0 = val[0].toUpperCase();\n      val0 = this.comparison[val0] || val0;\n      // compare\n      if (/^(=|!=|>|>=|<|<=)$/.test(val0)) {\n        if(val[1] === null){\n          whereStr += key + ' ' + (val[0] === '!=' ? 'IS NOT NULL' : 'IS NULL');\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // like or not like\n      else if (/^(NOT\\s+LIKE|LIKE|NOT\\s+ILIKE|ILIKE)$/.test(val0)) { \n        if (think.isArray(val[1])) {\n          //get like logic, default is OR\n          let likeLogic = this.getLogic(val[2], 'OR');\n          let like = val[1].map(item => key + ' ' + val0 + ' ' + this.parseValue(item)).join(' ' + likeLogic + ' ');\n          whereStr += '(' + like + ')';\n        }else{\n          whereStr += key + ' ' + val0 + ' ' + this.parseValue(val[1]);\n        }\n      }\n      // exp\n      else if(val0 === 'EXP'){ \n        whereStr += '(' + key + ' ' + val[1] + ')';\n      }\n      // in or not in\n      else if(val0 === 'IN' || val0 === 'NOT IN'){\n        if (val[2] === 'exp') {\n          whereStr += key + ' ' + val0 + ' ' + val[1];\n        }else{\n          if (think.isString(val[1])) {\n            val[1] = val[1].split(',');\n          }\n          if (!think.isArray(val[1])) {\n            val[1] = [val[1]];\n          }\n          val[1] = this.parseValue(val[1]);\n          if (val[1].length === 1) {\n            whereStr += key + (val0 === 'IN' ? ' = ' : ' != ') + val[1];\n          }else{\n            whereStr += key + ' ' + val0 + ' (' + val[1].join(',') + ')';\n          }\n        }\n      }\n      //between\n      else if(val0 === 'BETWEEN' || val0 === 'NOT BETWEEN'){\n        data = think.isString(val[1]) ? val[1].split(',') : val[1];\n        if (!think.isArray(data)) {\n          data = [val[1], val[2]];\n        }\n        whereStr += ' (' + key + ' ' + val0 + ' ' + this.parseValue(data[0]);\n        whereStr += ' AND ' + this.parseValue(data[1]) + ')';\n      }else{\n        throw new Error(think.locale('WHERE_CONDITION_INVALID', key, JSON.stringify(val)));\n      }\n    }else{\n\n      let length = val.length;\n      let logic = this.getLogic(val[length - 1], '');\n      if(logic){\n        length--;\n      }else{\n        logic = 'AND';\n      }\n      let result = [];\n      for(let i = 0; i < length; i++){\n        let isArr = think.isArray(val[i]);\n        data = isArr ? val[i][1] : val[i];\n        let exp = ((isArr ? val[i][0] : '') + '').toUpperCase();\n        if (exp === 'EXP') {\n          result.push(`(${key} ${data})`);\n        }else{\n          let op = isArr ? (this.comparison[val[i][0].toUpperCase()] || val[i][0]) : '=';\n          result.push(`(${key} ${op} ${this.parseValue(data)})`);\n        }\n      }\n      whereStr = result.join(` ${logic} `);\n    }\n    return whereStr;\n  }\n  /**\n   * parse key\n   * @param  {String} key []\n   * @return {String}     []\n   */\n  parseKey(key){\n    return `\"${key}\"`;\n  }\n  /**\n   * parse limit\n   * @param  {String} limit []\n   * @return {String}       []\n   */\n  parseLimit(limit){\n    if (think.isEmpty(limit)) {\n      return '';\n    }\n    if(think.isNumber(limit)){\n      return ` LIMIT ${limit}`;\n    }\n    if(think.isString(limit)){\n      limit = limit.split(/\\s*,\\s*/);\n    }\n    if(limit[1]){\n      return ' LIMIT ' + (limit[1] | 0) + ' OFFSET ' + (limit[0] | 0);\n    }\n    return ' LIMIT ' + (limit[0] | 0);\n  }\n  /**\n   * parse value\n   * @param  {Mixed} value []\n   * @return {Mixed}       []\n   */\n  parseValue(value){\n    if (think.isString(value)) {\n      value = 'E\\'' + this.escapeString(value) + '\\'';\n    }else if(think.isArray(value)){\n      if (/^exp$/.test(value[0])) {\n        value = value[1];\n      }else{\n        value = value.map(item => this.parseValue(item));\n      }\n    }else if(think.isBoolean(value)){\n      value = value ? 'true' : 'false';\n    }else if (value === null) {\n      value = 'null';\n    }\n    return value;\n  }\n  /**\n   * query string\n   * @param  string str\n   * @return promise\n   */\n  query(sql){\n    this.sql = sql;\n    return think.await(sql, () => {\n      return this.socket(sql).query(sql).then(data => {\n        return this.bufferToString(data.rows);\n      });\n    });\n  }\n  /**\n   * execute sql\n   * @param  {String} sql []\n   * @return {}     []\n   */\n  execute(sql){\n    this.sql = sql;\n    let insertInto = 'insert into ';\n    let prefix = sql.slice(0, insertInto.length).toLowerCase();\n    let isInsert = false;\n    if(prefix === insertInto){\n      sql += ' RETURNING id';\n      isInsert = true;\n    }\n    return this.socket(sql).execute(sql).then(data => {\n      if(isInsert){\n        this.lastInsertId = data.rows[0].id;\n      }\n      return data.rowCount || 0;\n    });\n  }\n}"]}