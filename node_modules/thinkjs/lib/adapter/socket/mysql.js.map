{"version":3,"sources":["../../../src/adapter/socket/mysql.js"],"names":[],"mappings":"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","file":"mysql.js","sourcesContent":["'use strict';\n\nimport Base from './base.js';\nimport mysql from 'mysql';\n\n/**\n * mysql socket class\n * @return {} []\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {Object} config [connection options]\n   * @return {}        []\n   */\n  init(config = {}){\n    super.init(config);\n    \n    //merge config\n    this.config = think.extend({\n      host: '127.0.0.1',\n      user: 'root',\n      password: ''\n    }, config);\n    this.config.port = this.config.port || 3306;\n\n    //rename encoding to charset\n    if(!this.config.charset && this.config.encoding){\n      this.config.charset = this.config.encoding;\n      delete this.config.encoding;\n    }\n\n    this.pool = null;\n  }\n  /**\n   * get connection\n   * @return {Promise} [conneciton handle]\n   */\n  getConnection(){\n    if (this.connection) {\n      return Promise.resolve(this.connection);\n    }\n\n    let config = this.config;\n    let str = `mysql://${config.user}:${config.password}@${config.host}:${config.port}/${config.database}`;\n\n    if (this.pool) {\n      let fn = think.promisify(this.pool.getConnection, this.pool);\n      let promise = fn().catch(err => {\n        this.close();\n        return Promise.reject(err);\n      });\n      let err = new Error(str);\n      return think.error(promise, err);\n    }\n\n    if (config.connectionLimit) {\n      this.logConnect(str, 'mysql');\n      \n      this.pool = mysql.createPool(config);\n      return this.getConnection();\n    }\n\n    let awaitKey = str;\n    if(this.config.forceNewNum){\n      awaitKey += '_' + this.config.forceNewNum;\n    }\n    return think.await(awaitKey, () => {\n      let deferred = think.defer();\n      this.connection = mysql.createConnection(config);\n      this.connection.connect(err => {\n        \n        this.logConnect(str, 'mysql');\n\n        if (err) {\n          deferred.reject(err);\n          this.close();\n        } else {\n          deferred.resolve(this.connection);\n        }\n      });\n      this.connection.on('error', () => {\n        this.close();\n      });\n      this.connection.on('close', () => {\n        this.close();\n      });\n      //PROTOCOL_CONNECTION_LOST\n      this.connection.on('end', () => {\n        this.connection = null;\n      });\n      let err = new Error(str);\n      return think.error(deferred.promise, err);\n    });\n  }\n  /**\n   * query sql\n   * @param  {String} sql []\n   * @return {[type]}     []\n   */\n  async query(sql, nestTables, times = 1){\n    let connection = await this.getConnection();\n    let data = {\n      sql: sql,\n      nestTables: nestTables\n    };\n    //query timeout\n    if (this.config.timeout) {\n      data.timeout = this.config.timeout;\n    }\n    let startTime = Date.now();\n    let fn = think.promisify(connection.query, connection);\n    let promise = fn(data).then((rows = []) => {\n      // just call connection.release() and the connection will return to the pool, \n      // ready to be used again by someone else.\n      // https://github.com/felixge/node-mysql#pooling-connections\n      if(this.pool && connection.release){\n        connection.release();\n      }\n\n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return rows;\n    }).catch(async err => {\n      if(this.pool && connection.release){\n        connection.release();\n      }\n      //Connection lost: The server closed the connection.\n      if(err.code === 'PROTOCOL_CONNECTION_LOST' || err.code === 'EPIPE'){\n        await this.close();\n        if(times <= 3){\n          return this.query(sql, nestTables, ++times);\n        }\n      }\n      \n      if (this.config.log_sql) {\n        think.log(sql, 'SQL', startTime);\n      }\n      return Promise.reject(err);\n    });\n    promise = this.autoClose(promise);\n    return think.error(promise);\n  }\n  /**\n   * execute\n   * @param  {Array} args []\n   * @return {Promise}         []\n   */\n  execute(...args){\n    return this.query(...args);\n  }\n  /**\n   * close connections\n   * @return {} []\n   */\n  close(){\n    if (this.pool) {\n      let fn = think.promisify(this.pool.end, this.pool);\n      return fn().then(() => this.pool = null);\n    } else if (this.connection) {\n      let fn = think.promisify(this.connection.end, this.connection);\n      return fn().then(() => this.connection = null);\n    }\n  }\n}"]}